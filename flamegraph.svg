<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="646" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="629.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="629.00"> </text><svg id="frames" x="10" width="1180" total_samples="125176"><g><title>&lt;ray_tracing_one_weekend::vec3::vec3::Vec3 as core::ops::arith::Add&gt;::add (41 samples, 0.03%)</title><rect x="0.0455%" y="389" width="0.0328%" height="15" fill="rgb(227,0,7)" fg:x="57" fg:w="41"/><text x="0.2955%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;rand::rngs::thread::ThreadRng&gt; (14 samples, 0.01%)</title><rect x="0.0839%" y="373" width="0.0112%" height="15" fill="rgb(217,0,24)" fg:x="105" fg:w="14"/><text x="0.3339%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt;&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="0.0839%" y="357" width="0.0112%" height="15" fill="rgb(221,193,54)" fg:x="105" fg:w="14"/><text x="0.3339%" y="367.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="0.0839%" y="341" width="0.0112%" height="15" fill="rgb(248,212,6)" fg:x="105" fg:w="14"/><text x="0.3339%" y="351.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_strong (13 samples, 0.01%)</title><rect x="0.0847%" y="325" width="0.0104%" height="15" fill="rgb(208,68,35)" fg:x="106" fg:w="13"/><text x="0.3347%" y="335.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (13 samples, 0.01%)</title><rect x="0.0847%" y="309" width="0.0104%" height="15" fill="rgb(232,128,0)" fg:x="106" fg:w="13"/><text x="0.3347%" y="319.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (13 samples, 0.01%)</title><rect x="0.0847%" y="293" width="0.0104%" height="15" fill="rgb(207,160,47)" fg:x="106" fg:w="13"/><text x="0.3347%" y="303.50"></text></g><g><title>core::mem::replace (13 samples, 0.01%)</title><rect x="0.0847%" y="277" width="0.0104%" height="15" fill="rgb(228,23,34)" fg:x="106" fg:w="13"/><text x="0.3347%" y="287.50"></text></g><g><title>core::ptr::write (13 samples, 0.01%)</title><rect x="0.0847%" y="261" width="0.0104%" height="15" fill="rgb(218,30,26)" fg:x="106" fg:w="13"/><text x="0.3347%" y="271.50"></text></g><g><title>ppv_lite86::x86_64::sse2::avx2::&lt;impl ppv_lite86::types::MultiLane&lt;[ppv_lite86::x86_64::sse2::u32x4_sse2&lt;ppv_lite86::x86_64::YesS3,ppv_lite86::x86_64::YesS4,NI&gt;: 4]&gt; for ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt;,ppv_lite86::x86_64::sse2::G0&gt;&gt;::from_lanes (31 samples, 0.02%)</title><rect x="0.1222%" y="149" width="0.0248%" height="15" fill="rgb(220,122,19)" fg:x="153" fg:w="31"/><text x="0.3722%" y="159.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::MultiLane&lt;[ppv_lite86::x86_64::sse2::u32x4_sse2&lt;ppv_lite86::x86_64::YesS3,ppv_lite86::x86_64::YesS4,NI&gt;: 2]&gt;&gt;::from_lanes (31 samples, 0.02%)</title><rect x="0.1222%" y="133" width="0.0248%" height="15" fill="rgb(250,228,42)" fg:x="153" fg:w="31"/><text x="0.3722%" y="143.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_setr_m128i (31 samples, 0.02%)</title><rect x="0.1222%" y="117" width="0.0248%" height="15" fill="rgb(240,193,28)" fg:x="153" fg:w="31"/><text x="0.3722%" y="127.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set_m128i (31 samples, 0.02%)</title><rect x="0.1222%" y="101" width="0.0248%" height="15" fill="rgb(216,20,37)" fg:x="153" fg:w="31"/><text x="0.3722%" y="111.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set_m128 (31 samples, 0.02%)</title><rect x="0.1222%" y="85" width="0.0248%" height="15" fill="rgb(206,188,39)" fg:x="153" fg:w="31"/><text x="0.3722%" y="95.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (73 samples, 0.06%)</title><rect x="0.1166%" y="197" width="0.0583%" height="15" fill="rgb(217,207,13)" fg:x="146" fg:w="73"/><text x="0.3666%" y="207.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (72 samples, 0.06%)</title><rect x="0.1174%" y="181" width="0.0575%" height="15" fill="rgb(231,73,38)" fg:x="147" fg:w="72"/><text x="0.3674%" y="191.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (72 samples, 0.06%)</title><rect x="0.1174%" y="165" width="0.0575%" height="15" fill="rgb(225,20,46)" fg:x="147" fg:w="72"/><text x="0.3674%" y="175.50"></text></g><g><title>rand_chacha::guts::round (34 samples, 0.03%)</title><rect x="0.1478%" y="149" width="0.0272%" height="15" fill="rgb(210,31,41)" fg:x="185" fg:w="34"/><text x="0.3978%" y="159.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (75 samples, 0.06%)</title><rect x="0.1158%" y="229" width="0.0599%" height="15" fill="rgb(221,200,47)" fg:x="145" fg:w="75"/><text x="0.3658%" y="239.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (75 samples, 0.06%)</title><rect x="0.1158%" y="213" width="0.0599%" height="15" fill="rgb(226,26,5)" fg:x="145" fg:w="75"/><text x="0.3658%" y="223.50"></text></g><g><title>rand::rng::Rng::gen (103 samples, 0.08%)</title><rect x="0.0951%" y="373" width="0.0823%" height="15" fill="rgb(249,33,26)" fg:x="119" fg:w="103"/><text x="0.3451%" y="383.50"></text></g><g><title>rand::distributions::float::&lt;impl rand::distributions::distribution::Distribution&lt;f32&gt; for rand::distributions::Standard&gt;::sample (103 samples, 0.08%)</title><rect x="0.0951%" y="357" width="0.0823%" height="15" fill="rgb(235,183,28)" fg:x="119" fg:w="103"/><text x="0.3451%" y="367.50"></text></g><g><title>rand::rng::Rng::gen (93 samples, 0.07%)</title><rect x="0.1031%" y="341" width="0.0743%" height="15" fill="rgb(221,5,38)" fg:x="129" fg:w="93"/><text x="0.3531%" y="351.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (93 samples, 0.07%)</title><rect x="0.1031%" y="325" width="0.0743%" height="15" fill="rgb(247,18,42)" fg:x="129" fg:w="93"/><text x="0.3531%" y="335.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (93 samples, 0.07%)</title><rect x="0.1031%" y="309" width="0.0743%" height="15" fill="rgb(241,131,45)" fg:x="129" fg:w="93"/><text x="0.3531%" y="319.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (93 samples, 0.07%)</title><rect x="0.1031%" y="293" width="0.0743%" height="15" fill="rgb(249,31,29)" fg:x="129" fg:w="93"/><text x="0.3531%" y="303.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (93 samples, 0.07%)</title><rect x="0.1031%" y="277" width="0.0743%" height="15" fill="rgb(225,111,53)" fg:x="129" fg:w="93"/><text x="0.3531%" y="287.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (78 samples, 0.06%)</title><rect x="0.1150%" y="261" width="0.0623%" height="15" fill="rgb(238,160,17)" fg:x="144" fg:w="78"/><text x="0.3650%" y="271.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (78 samples, 0.06%)</title><rect x="0.1150%" y="245" width="0.0623%" height="15" fill="rgb(214,148,48)" fg:x="144" fg:w="78"/><text x="0.3650%" y="255.50"></text></g><g><title>rand::rngs::thread::THREAD_RNG_KEY::__getit (13 samples, 0.01%)</title><rect x="0.1774%" y="325" width="0.0104%" height="15" fill="rgb(232,36,49)" fg:x="222" fg:w="13"/><text x="0.4274%" y="335.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (13 samples, 0.01%)</title><rect x="0.1774%" y="309" width="0.0104%" height="15" fill="rgb(209,103,24)" fg:x="222" fg:w="13"/><text x="0.4274%" y="319.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (13 samples, 0.01%)</title><rect x="0.1774%" y="293" width="0.0104%" height="15" fill="rgb(229,88,8)" fg:x="222" fg:w="13"/><text x="0.4274%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (13 samples, 0.01%)</title><rect x="0.1774%" y="277" width="0.0104%" height="15" fill="rgb(213,181,19)" fg:x="222" fg:w="13"/><text x="0.4274%" y="287.50"></text></g><g><title>rand::random (152 samples, 0.12%)</title><rect x="0.0783%" y="389" width="0.1214%" height="15" fill="rgb(254,191,54)" fg:x="98" fg:w="152"/><text x="0.3283%" y="399.50"></text></g><g><title>rand::rngs::thread::thread_rng (28 samples, 0.02%)</title><rect x="0.1774%" y="373" width="0.0224%" height="15" fill="rgb(241,83,37)" fg:x="222" fg:w="28"/><text x="0.4274%" y="383.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (28 samples, 0.02%)</title><rect x="0.1774%" y="357" width="0.0224%" height="15" fill="rgb(233,36,39)" fg:x="222" fg:w="28"/><text x="0.4274%" y="367.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (28 samples, 0.02%)</title><rect x="0.1774%" y="341" width="0.0224%" height="15" fill="rgb(226,3,54)" fg:x="222" fg:w="28"/><text x="0.4274%" y="351.50"></text></g><g><title>rand::rngs::thread::thread_rng::{{closure}} (15 samples, 0.01%)</title><rect x="0.1877%" y="325" width="0.0120%" height="15" fill="rgb(245,192,40)" fg:x="235" fg:w="15"/><text x="0.4377%" y="335.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (15 samples, 0.01%)</title><rect x="0.1877%" y="309" width="0.0120%" height="15" fill="rgb(238,167,29)" fg:x="235" fg:w="15"/><text x="0.4377%" y="319.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (15 samples, 0.01%)</title><rect x="0.1877%" y="293" width="0.0120%" height="15" fill="rgb(232,182,51)" fg:x="235" fg:w="15"/><text x="0.4377%" y="303.50"></text></g><g><title>&lt;ray_tracing_one_weekend::vec3::vec3::Vec3 as core::ops::arith::Add&gt;::add (31 samples, 0.02%)</title><rect x="0.1997%" y="373" width="0.0248%" height="15" fill="rgb(231,60,39)" fg:x="250" fg:w="31"/><text x="0.4497%" y="383.50"></text></g><g><title>&lt;ray_tracing_one_weekend::vec3::vec3::Vec3 as core::ops::arith::Mul&lt;f32&gt;&gt;::mul (15 samples, 0.01%)</title><rect x="0.2245%" y="373" width="0.0120%" height="15" fill="rgb(208,69,12)" fg:x="281" fg:w="15"/><text x="0.4745%" y="383.50"></text></g><g><title>&lt;ray_tracing_one_weekend::vec3::vec3::Vec3 as core::ops::arith::Sub&gt;::sub (16 samples, 0.01%)</title><rect x="0.2365%" y="373" width="0.0128%" height="15" fill="rgb(235,93,37)" fg:x="296" fg:w="16"/><text x="0.4865%" y="383.50"></text></g><g><title>&lt;u32 as rand::distributions::float::IntoFloat&gt;::into_float_with_exponent (13 samples, 0.01%)</title><rect x="0.3219%" y="293" width="0.0104%" height="15" fill="rgb(213,116,39)" fg:x="403" fg:w="13"/><text x="0.5719%" y="303.50"></text></g><g><title>ppv_lite86::x86_64::sse2::avx2::&lt;impl ppv_lite86::types::MultiLane&lt;[ppv_lite86::x86_64::sse2::u32x4_sse2&lt;ppv_lite86::x86_64::YesS3,ppv_lite86::x86_64::YesS4,NI&gt;: 4]&gt; for ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt;,ppv_lite86::x86_64::sse2::G0&gt;&gt;::from_lanes (39 samples, 0.03%)</title><rect x="0.3579%" y="101" width="0.0312%" height="15" fill="rgb(222,207,29)" fg:x="448" fg:w="39"/><text x="0.6079%" y="111.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::MultiLane&lt;[ppv_lite86::x86_64::sse2::u32x4_sse2&lt;ppv_lite86::x86_64::YesS3,ppv_lite86::x86_64::YesS4,NI&gt;: 2]&gt;&gt;::from_lanes (39 samples, 0.03%)</title><rect x="0.3579%" y="85" width="0.0312%" height="15" fill="rgb(206,96,30)" fg:x="448" fg:w="39"/><text x="0.6079%" y="95.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_setr_m128i (39 samples, 0.03%)</title><rect x="0.3579%" y="69" width="0.0312%" height="15" fill="rgb(218,138,4)" fg:x="448" fg:w="39"/><text x="0.6079%" y="79.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set_m128i (39 samples, 0.03%)</title><rect x="0.3579%" y="53" width="0.0312%" height="15" fill="rgb(250,191,14)" fg:x="448" fg:w="39"/><text x="0.6079%" y="63.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set_m128 (39 samples, 0.03%)</title><rect x="0.3579%" y="37" width="0.0312%" height="15" fill="rgb(239,60,40)" fg:x="448" fg:w="39"/><text x="0.6079%" y="47.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::arith::AddAssign&gt;::add_assign (14 samples, 0.01%)</title><rect x="0.3922%" y="85" width="0.0112%" height="15" fill="rgb(206,27,48)" fg:x="491" fg:w="14"/><text x="0.6422%" y="95.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::AddAssign&gt;::add_assign (14 samples, 0.01%)</title><rect x="0.3922%" y="69" width="0.0112%" height="15" fill="rgb(225,35,8)" fg:x="491" fg:w="14"/><text x="0.6422%" y="79.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::Add&gt;::add (14 samples, 0.01%)</title><rect x="0.3922%" y="53" width="0.0112%" height="15" fill="rgb(250,213,24)" fg:x="491" fg:w="14"/><text x="0.6422%" y="63.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (14 samples, 0.01%)</title><rect x="0.3922%" y="37" width="0.0112%" height="15" fill="rgb(247,123,22)" fg:x="491" fg:w="14"/><text x="0.6422%" y="47.50"></text></g><g><title>rand_chacha::guts::round (42 samples, 0.03%)</title><rect x="0.3922%" y="101" width="0.0336%" height="15" fill="rgb(231,138,38)" fg:x="491" fg:w="42"/><text x="0.6422%" y="111.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (100 samples, 0.08%)</title><rect x="0.3475%" y="149" width="0.0799%" height="15" fill="rgb(231,145,46)" fg:x="435" fg:w="100"/><text x="0.5975%" y="159.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (99 samples, 0.08%)</title><rect x="0.3483%" y="133" width="0.0791%" height="15" fill="rgb(251,118,11)" fg:x="436" fg:w="99"/><text x="0.5983%" y="143.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (99 samples, 0.08%)</title><rect x="0.3483%" y="117" width="0.0791%" height="15" fill="rgb(217,147,25)" fg:x="436" fg:w="99"/><text x="0.5983%" y="127.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (107 samples, 0.09%)</title><rect x="0.3435%" y="181" width="0.0855%" height="15" fill="rgb(247,81,37)" fg:x="430" fg:w="107"/><text x="0.5935%" y="191.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (107 samples, 0.09%)</title><rect x="0.3435%" y="165" width="0.0855%" height="15" fill="rgb(209,12,38)" fg:x="430" fg:w="107"/><text x="0.5935%" y="175.50"></text></g><g><title>rand::rng::Rng::gen_range (194 samples, 0.15%)</title><rect x="0.2764%" y="341" width="0.1550%" height="15" fill="rgb(227,1,9)" fg:x="346" fg:w="194"/><text x="0.5264%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (194 samples, 0.15%)</title><rect x="0.2764%" y="325" width="0.1550%" height="15" fill="rgb(248,47,43)" fg:x="346" fg:w="194"/><text x="0.5264%" y="335.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformFloat&lt;f32&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (194 samples, 0.15%)</title><rect x="0.2764%" y="309" width="0.1550%" height="15" fill="rgb(221,10,30)" fg:x="346" fg:w="194"/><text x="0.5264%" y="319.50"></text></g><g><title>rand::rng::Rng::gen (124 samples, 0.10%)</title><rect x="0.3323%" y="293" width="0.0991%" height="15" fill="rgb(210,229,1)" fg:x="416" fg:w="124"/><text x="0.5823%" y="303.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (124 samples, 0.10%)</title><rect x="0.3323%" y="277" width="0.0991%" height="15" fill="rgb(222,148,37)" fg:x="416" fg:w="124"/><text x="0.5823%" y="287.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (124 samples, 0.10%)</title><rect x="0.3323%" y="261" width="0.0991%" height="15" fill="rgb(234,67,33)" fg:x="416" fg:w="124"/><text x="0.5823%" y="271.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (124 samples, 0.10%)</title><rect x="0.3323%" y="245" width="0.0991%" height="15" fill="rgb(247,98,35)" fg:x="416" fg:w="124"/><text x="0.5823%" y="255.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (124 samples, 0.10%)</title><rect x="0.3323%" y="229" width="0.0991%" height="15" fill="rgb(247,138,52)" fg:x="416" fg:w="124"/><text x="0.5823%" y="239.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (111 samples, 0.09%)</title><rect x="0.3427%" y="213" width="0.0887%" height="15" fill="rgb(213,79,30)" fg:x="429" fg:w="111"/><text x="0.5927%" y="223.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (111 samples, 0.09%)</title><rect x="0.3427%" y="197" width="0.0887%" height="15" fill="rgb(246,177,23)" fg:x="429" fg:w="111"/><text x="0.5927%" y="207.50"></text></g><g><title>rand::rngs::thread::THREAD_RNG_KEY::__getit (22 samples, 0.02%)</title><rect x="0.4314%" y="293" width="0.0176%" height="15" fill="rgb(230,62,27)" fg:x="540" fg:w="22"/><text x="0.6814%" y="303.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (22 samples, 0.02%)</title><rect x="0.4314%" y="277" width="0.0176%" height="15" fill="rgb(216,154,8)" fg:x="540" fg:w="22"/><text x="0.6814%" y="287.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (22 samples, 0.02%)</title><rect x="0.4314%" y="261" width="0.0176%" height="15" fill="rgb(244,35,45)" fg:x="540" fg:w="22"/><text x="0.6814%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (22 samples, 0.02%)</title><rect x="0.4314%" y="245" width="0.0176%" height="15" fill="rgb(251,115,12)" fg:x="540" fg:w="22"/><text x="0.6814%" y="255.50"></text></g><g><title>ray_tracing_one_weekend::rtweekend::random_float (270 samples, 0.22%)</title><rect x="0.2604%" y="357" width="0.2157%" height="15" fill="rgb(240,54,50)" fg:x="326" fg:w="270"/><text x="0.5104%" y="367.50"></text></g><g><title>rand::rngs::thread::thread_rng (56 samples, 0.04%)</title><rect x="0.4314%" y="341" width="0.0447%" height="15" fill="rgb(233,84,52)" fg:x="540" fg:w="56"/><text x="0.6814%" y="351.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (56 samples, 0.04%)</title><rect x="0.4314%" y="325" width="0.0447%" height="15" fill="rgb(207,117,47)" fg:x="540" fg:w="56"/><text x="0.6814%" y="335.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (56 samples, 0.04%)</title><rect x="0.4314%" y="309" width="0.0447%" height="15" fill="rgb(249,43,39)" fg:x="540" fg:w="56"/><text x="0.6814%" y="319.50"></text></g><g><title>rand::rngs::thread::thread_rng::{{closure}} (34 samples, 0.03%)</title><rect x="0.4490%" y="293" width="0.0272%" height="15" fill="rgb(209,38,44)" fg:x="562" fg:w="34"/><text x="0.6990%" y="303.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (34 samples, 0.03%)</title><rect x="0.4490%" y="277" width="0.0272%" height="15" fill="rgb(236,212,23)" fg:x="562" fg:w="34"/><text x="0.6990%" y="287.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (34 samples, 0.03%)</title><rect x="0.4490%" y="261" width="0.0272%" height="15" fill="rgb(242,79,21)" fg:x="562" fg:w="34"/><text x="0.6990%" y="271.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (18 samples, 0.01%)</title><rect x="0.4617%" y="245" width="0.0144%" height="15" fill="rgb(211,96,35)" fg:x="578" fg:w="18"/><text x="0.7117%" y="255.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (18 samples, 0.01%)</title><rect x="0.4617%" y="229" width="0.0144%" height="15" fill="rgb(253,215,40)" fg:x="578" fg:w="18"/><text x="0.7117%" y="239.50"></text></g><g><title>core::mem::replace (18 samples, 0.01%)</title><rect x="0.4617%" y="213" width="0.0144%" height="15" fill="rgb(211,81,21)" fg:x="578" fg:w="18"/><text x="0.7117%" y="223.50"></text></g><g><title>core::ptr::write (18 samples, 0.01%)</title><rect x="0.4617%" y="197" width="0.0144%" height="15" fill="rgb(208,190,38)" fg:x="578" fg:w="18"/><text x="0.7117%" y="207.50"></text></g><g><title>ray_tracing_one_weekend::vec3::utils::random_in_unit_disk (298 samples, 0.24%)</title><rect x="0.2492%" y="373" width="0.2381%" height="15" fill="rgb(235,213,38)" fg:x="312" fg:w="298"/><text x="0.4992%" y="383.50"></text></g><g><title>ray_tracing_one_weekend::vec3::vec3::Vec3::length_squared (14 samples, 0.01%)</title><rect x="0.4761%" y="357" width="0.0112%" height="15" fill="rgb(237,122,38)" fg:x="596" fg:w="14"/><text x="0.7261%" y="367.50"></text></g><g><title>ray_tracing_one_weekend::camera::Camera::get_ray (373 samples, 0.30%)</title><rect x="0.1997%" y="389" width="0.2980%" height="15" fill="rgb(244,218,35)" fg:x="250" fg:w="373"/><text x="0.4497%" y="399.50"></text></g><g><title>ray_tracing_one_weekend::vec3::vec3::&lt;impl core::ops::arith::Mul&lt;ray_tracing_one_weekend::vec3::vec3::Vec3&gt; for f32&gt;::mul (13 samples, 0.01%)</title><rect x="0.4873%" y="373" width="0.0104%" height="15" fill="rgb(240,68,47)" fg:x="610" fg:w="13"/><text x="0.7373%" y="383.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2,474 samples, 1.98%)</title><rect x="6.5652%" y="357" width="1.9764%" height="15" fill="rgb(210,16,53)" fg:x="8218" fg:w="2474"/><text x="6.8152%" y="367.50">&lt;..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,491 samples, 1.99%)</title><rect x="8.5472%" y="357" width="1.9900%" height="15" fill="rgb(235,124,12)" fg:x="10699" fg:w="2491"/><text x="8.7972%" y="367.50">&lt;..</text></g><g><title>&lt;ray_tracing_one_weekend::vec3::vec3::Vec3 as core::ops::arith::Sub&gt;::sub (5,081 samples, 4.06%)</title><rect x="45.2187%" y="341" width="4.0591%" height="15" fill="rgb(224,169,11)" fg:x="56603" fg:w="5081"/><text x="45.4687%" y="351.50">&lt;ray..</text></g><g><title>ray_tracing_one_weekend::ray::Ray::direction (23,082 samples, 18.44%)</title><rect x="49.2778%" y="341" width="18.4396%" height="15" fill="rgb(250,166,2)" fg:x="61684" fg:w="23082"/><text x="49.5278%" y="351.50">ray_tracing_one_weekend::ray:..</text></g><g><title>ray_tracing_one_weekend::vec3::vec3::Vec3::length_squared (10,158 samples, 8.11%)</title><rect x="67.7246%" y="341" width="8.1150%" height="15" fill="rgb(242,216,29)" fg:x="84775" fg:w="10158"/><text x="67.9746%" y="351.50">ray_tracing..</text></g><g><title>&lt;ray_tracing_one_weekend::hittable_list::HittableList as ray_tracing_one_weekend::hittable::Hittable&gt;::hit (123,893 samples, 98.98%)</title><rect x="0.6223%" y="373" width="98.9750%" height="15" fill="rgb(230,116,27)" fg:x="779" fg:w="123893"/><text x="0.8723%" y="383.50">&lt;ray_tracing_one_weekend::hittable_list::HittableList as ray_tracing_one_weekend::hittable::Hittable&gt;::hit</text></g><g><title>&lt;ray_tracing_one_weekend::sphere::Sphere as ray_tracing_one_weekend::hittable::Hittable&gt;::hit (111,482 samples, 89.06%)</title><rect x="10.5372%" y="357" width="89.0602%" height="15" fill="rgb(228,99,48)" fg:x="13190" fg:w="111482"/><text x="10.7872%" y="367.50">&lt;ray_tracing_one_weekend::sphere::Sphere as ray_tracing_one_weekend::hittable::Hittable&gt;::hit</text></g><g><title>ray_tracing_one_weekend::vec3::vec3::dot (29,739 samples, 23.76%)</title><rect x="75.8396%" y="341" width="23.7577%" height="15" fill="rgb(253,11,6)" fg:x="94933" fg:w="29739"/><text x="76.0896%" y="351.50">ray_tracing_one_weekend::vec3::vec3::d..</text></g><g><title>std::f32::&lt;impl f32&gt;::mul_add (19,696 samples, 15.73%)</title><rect x="83.8627%" y="325" width="15.7346%" height="15" fill="rgb(247,143,39)" fg:x="104976" fg:w="19696"/><text x="84.1127%" y="335.50">std::f32::&lt;impl f32&gt;::mu..</text></g><g><title>[libm-2.31.so] (17,197 samples, 13.74%)</title><rect x="85.8591%" y="309" width="13.7383%" height="15" fill="rgb(236,97,10)" fg:x="107475" fg:w="17197"/><text x="86.1091%" y="319.50">[libm-2.31.so]</text></g><g><title>&lt;ray_tracing_one_weekend::vec3::vec3::Vec3 as core::ops::arith::Add&gt;::add (51 samples, 0.04%)</title><rect x="99.5974%" y="373" width="0.0407%" height="15" fill="rgb(233,208,19)" fg:x="124672" fg:w="51"/><text x="99.8474%" y="383.50"></text></g><g><title>ray_tracing_one_weekend::vec3::vec3::&lt;impl core::ops::arith::Mul&lt;ray_tracing_one_weekend::vec3::vec3::Vec3&gt; for f32&gt;::mul (28 samples, 0.02%)</title><rect x="99.6381%" y="373" width="0.0224%" height="15" fill="rgb(216,164,2)" fg:x="124723" fg:w="28"/><text x="99.8881%" y="383.50"></text></g><g><title>&lt;ray_tracing_one_weekend::vec3::vec3::Vec3 as core::ops::arith::Div&lt;f32&gt;&gt;::div (59 samples, 0.05%)</title><rect x="99.6605%" y="357" width="0.0471%" height="15" fill="rgb(220,129,5)" fg:x="124751" fg:w="59"/><text x="99.9105%" y="367.50"></text></g><g><title>&lt;ray_tracing_one_weekend::vec3::vec3::Vec3 as core::ops::arith::Mul&lt;f32&gt;&gt;::mul (59 samples, 0.05%)</title><rect x="99.6605%" y="341" width="0.0471%" height="15" fill="rgb(242,17,10)" fg:x="124751" fg:w="59"/><text x="99.9105%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (124,841 samples, 99.73%)</title><rect x="0.0008%" y="453" width="99.7324%" height="15" fill="rgb(242,107,0)" fg:x="1" fg:w="124841"/><text x="0.2508%" y="463.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (124,841 samples, 99.73%)</title><rect x="0.0008%" y="437" width="99.7324%" height="15" fill="rgb(251,28,31)" fg:x="1" fg:w="124841"/><text x="0.2508%" y="447.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (124,835 samples, 99.73%)</title><rect x="0.0056%" y="421" width="99.7276%" height="15" fill="rgb(233,223,10)" fg:x="7" fg:w="124835"/><text x="0.2556%" y="431.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>ray_tracing_one_weekend::main::{{closure}} (124,822 samples, 99.72%)</title><rect x="0.0160%" y="405" width="99.7172%" height="15" fill="rgb(215,21,27)" fg:x="20" fg:w="124822"/><text x="0.2660%" y="415.50">ray_tracing_one_weekend::main::{{closure}}</text></g><g><title>ray_tracing_one_weekend::ray_color (124,219 samples, 99.24%)</title><rect x="0.4977%" y="389" width="99.2355%" height="15" fill="rgb(232,23,21)" fg:x="623" fg:w="124219"/><text x="0.7477%" y="399.50">ray_tracing_one_weekend::ray_color</text></g><g><title>ray_tracing_one_weekend::vec3::vec3::unit (91 samples, 0.07%)</title><rect x="99.6605%" y="373" width="0.0727%" height="15" fill="rgb(244,5,23)" fg:x="124751" fg:w="91"/><text x="99.9105%" y="383.50"></text></g><g><title>ray_tracing_one_weekend::vec3::vec3::Vec3::length (32 samples, 0.03%)</title><rect x="99.7076%" y="357" width="0.0256%" height="15" fill="rgb(226,81,46)" fg:x="124810" fg:w="32"/><text x="99.9576%" y="367.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::sqrt (22 samples, 0.02%)</title><rect x="99.7156%" y="341" width="0.0176%" height="15" fill="rgb(247,70,30)" fg:x="124820" fg:w="22"/><text x="99.9656%" y="351.50"></text></g><g><title>ray_tracing_one_weekend::ray::Ray::direction (53 samples, 0.04%)</title><rect x="99.8490%" y="341" width="0.0423%" height="15" fill="rgb(212,68,19)" fg:x="124987" fg:w="53"/><text x="100.0990%" y="351.50"></text></g><g><title>ray_tracing_one_weekend::vec3::vec3::Vec3::length_squared (18 samples, 0.01%)</title><rect x="99.8914%" y="341" width="0.0144%" height="15" fill="rgb(240,187,13)" fg:x="125040" fg:w="18"/><text x="100.1414%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (125,119 samples, 99.95%)</title><rect x="0.0008%" y="469" width="99.9545%" height="15" fill="rgb(223,113,26)" fg:x="1" fg:w="125119"/><text x="0.2508%" y="479.50">core::iter::traits::iterator::Iterator::reduce</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (278 samples, 0.22%)</title><rect x="99.7332%" y="453" width="0.2221%" height="15" fill="rgb(206,192,2)" fg:x="124842" fg:w="278"/><text x="99.9832%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (278 samples, 0.22%)</title><rect x="99.7332%" y="437" width="0.2221%" height="15" fill="rgb(241,108,4)" fg:x="124842" fg:w="278"/><text x="99.9832%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (278 samples, 0.22%)</title><rect x="99.7332%" y="421" width="0.2221%" height="15" fill="rgb(247,173,49)" fg:x="124842" fg:w="278"/><text x="99.9832%" y="431.50"></text></g><g><title>ray_tracing_one_weekend::main::{{closure}} (278 samples, 0.22%)</title><rect x="99.7332%" y="405" width="0.2221%" height="15" fill="rgb(224,114,35)" fg:x="124842" fg:w="278"/><text x="99.9832%" y="415.50"></text></g><g><title>ray_tracing_one_weekend::ray_color (267 samples, 0.21%)</title><rect x="99.7420%" y="389" width="0.2133%" height="15" fill="rgb(245,159,27)" fg:x="124853" fg:w="267"/><text x="99.9920%" y="399.50"></text></g><g><title>&lt;ray_tracing_one_weekend::hittable_list::HittableList as ray_tracing_one_weekend::hittable::Hittable&gt;::hit (265 samples, 0.21%)</title><rect x="99.7436%" y="373" width="0.2117%" height="15" fill="rgb(245,172,44)" fg:x="124855" fg:w="265"/><text x="99.9936%" y="383.50"></text></g><g><title>&lt;ray_tracing_one_weekend::sphere::Sphere as ray_tracing_one_weekend::hittable::Hittable&gt;::hit (239 samples, 0.19%)</title><rect x="99.7643%" y="357" width="0.1909%" height="15" fill="rgb(236,23,11)" fg:x="124881" fg:w="239"/><text x="100.0143%" y="367.50"></text></g><g><title>ray_tracing_one_weekend::vec3::vec3::dot (62 samples, 0.05%)</title><rect x="99.9057%" y="341" width="0.0495%" height="15" fill="rgb(205,117,38)" fg:x="125058" fg:w="62"/><text x="100.1557%" y="351.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::mul_add (44 samples, 0.04%)</title><rect x="99.9201%" y="325" width="0.0352%" height="15" fill="rgb(237,72,25)" fg:x="125076" fg:w="44"/><text x="100.1701%" y="335.50"></text></g><g><title>[libm-2.31.so] (40 samples, 0.03%)</title><rect x="99.9233%" y="309" width="0.0320%" height="15" fill="rgb(244,70,9)" fg:x="125080" fg:w="40"/><text x="100.1733%" y="319.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (22 samples, 0.02%)</title><rect x="99.9656%" y="325" width="0.0176%" height="15" fill="rgb(217,125,39)" fg:x="125133" fg:w="22"/><text x="100.2156%" y="335.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (26 samples, 0.02%)</title><rect x="99.9648%" y="357" width="0.0208%" height="15" fill="rgb(235,36,10)" fg:x="125132" fg:w="26"/><text x="100.2148%" y="367.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (26 samples, 0.02%)</title><rect x="99.9648%" y="341" width="0.0208%" height="15" fill="rgb(251,123,47)" fg:x="125132" fg:w="26"/><text x="100.2148%" y="351.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (30 samples, 0.02%)</title><rect x="99.9633%" y="389" width="0.0240%" height="15" fill="rgb(221,13,13)" fg:x="125130" fg:w="30"/><text x="100.2133%" y="399.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (29 samples, 0.02%)</title><rect x="99.9641%" y="373" width="0.0232%" height="15" fill="rgb(238,131,9)" fg:x="125131" fg:w="29"/><text x="100.2141%" y="383.50"></text></g><g><title>std::io::Write::write_fmt (43 samples, 0.03%)</title><rect x="99.9617%" y="421" width="0.0344%" height="15" fill="rgb(211,50,8)" fg:x="125128" fg:w="43"/><text x="100.2117%" y="431.50"></text></g><g><title>core::fmt::write (43 samples, 0.03%)</title><rect x="99.9617%" y="405" width="0.0344%" height="15" fill="rgb(245,182,24)" fg:x="125128" fg:w="43"/><text x="100.2117%" y="415.50"></text></g><g><title>all (125,176 samples, 100%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(242,14,37)" fg:x="0" fg:w="125176"/><text x="0.2500%" y="607.50"></text></g><g><title>ray_tracing_one (125,176 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(246,228,12)" fg:x="0" fg:w="125176"/><text x="0.2500%" y="591.50">ray_tracing_one</text></g><g><title>_start (125,176 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(213,55,15)" fg:x="0" fg:w="125176"/><text x="0.2500%" y="575.50">_start</text></g><g><title>__libc_start_main (125,176 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(209,9,3)" fg:x="0" fg:w="125176"/><text x="0.2500%" y="559.50">__libc_start_main</text></g><g><title>main (125,176 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(230,59,30)" fg:x="0" fg:w="125176"/><text x="0.2500%" y="543.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (125,176 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(209,121,21)" fg:x="0" fg:w="125176"/><text x="0.2500%" y="527.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (125,176 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(220,109,13)" fg:x="0" fg:w="125176"/><text x="0.2500%" y="511.50">core::ops::function::FnOnce::call_once</text></g><g><title>ray_tracing_one_weekend::main (125,176 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(232,18,1)" fg:x="0" fg:w="125176"/><text x="0.2500%" y="495.50">ray_tracing_one_weekend::main</text></g><g><title>ray_tracing_one_weekend::color::write_color (54 samples, 0.04%)</title><rect x="99.9569%" y="469" width="0.0431%" height="15" fill="rgb(215,41,42)" fg:x="125122" fg:w="54"/><text x="100.2069%" y="479.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (54 samples, 0.04%)</title><rect x="99.9569%" y="453" width="0.0431%" height="15" fill="rgb(224,123,36)" fg:x="125122" fg:w="54"/><text x="100.2069%" y="463.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (54 samples, 0.04%)</title><rect x="99.9569%" y="437" width="0.0431%" height="15" fill="rgb(240,125,3)" fg:x="125122" fg:w="54"/><text x="100.2069%" y="447.50"></text></g></svg></svg>